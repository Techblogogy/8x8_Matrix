#define F_CPU 10000000UL

#include <avr/io.h>
#include <util/delay.h>

#define SIZE 8

uint8_t tBuffer[SIZE];
uint8_t sBuffer[SIZE] =
{
	0b11111111,
	0b11111110,
	0b11111100,
	0b11111000,
	0b11110000,
	0b11100000,
	0b11000000,
	0b10000000
};

int8_t xH, iS = 0;

void Render()
{
	for (xH = 0; xH < SIZE; xH++)
	{
		for (iS = 7; iS >= 4; iS--)
		{
			if ( ((sBuffer[xH] & (1 << (7-iS))) >> (7-iS))  == 1)
				PORTB |= _BV(0);
			else
				PORTB &= ~_BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}

		for (iS = 3; iS >= 0; iS--)
		{
			if (iS == xH)
				PORTB &= ~_BV(0);
			else
				PORTB |= _BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}

		for (iS = 0; iS < 4; iS++)
		{
			if ( ((sBuffer[xH] & (1 << (7-iS))) >> (7-iS))  == 1)
				PORTB |= _BV(0);
			else
				PORTB &= ~_BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}
		for (iS = 4; iS < 8; iS++)
		{
			if (iS == xH)
				PORTB &= ~_BV(0);
			else
				PORTB |= _BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}

		PORTB |= _BV(1); //Latch HIGH
		PORTB &= ~_BV(1); //Latch LOW
	}
}

void Logic()
{
	//Copy temp buffer with screen buffer
	for (xH = 0; xH < SIZE * SIZE; xH++)
		tBuffer[xH] = sBuffer[xH];

	//Calculate
	for (uint8_t y = 0; y < SIZE; y++) {
		for (uint8_t x = 0; x < SIZE; x++) {
			int n = 0; //Neighbours
			int i = y * SIZE + x; //Id Of Cell

			//Calculate Neigbours
			for (uint8_t y0 = y - 1; y0 <= y + 1; y0++) {
				for (uint8_t x0 = x - 1; x0 <= x + 1; x0++) {
					if ((y != y0 || x != x0)
							&& (x0 >= 0 && x0 < SIZE && y0 >= 0 && y0 < SIZE)) {
						if (tBuffer[y0 * SIZE + x0])
							n++;
					}
				}
			}

			//Apply Rules
			if (tBuffer[i]) {
				if (n < 2)
					sBuffer |= (1 << i); //sBuffer[i] = 0;
				else if (n == 2 || n == 3)
					sBuffer[i] = 1;
				else if (n > 3)
					sBuffer[i] = 0;
			} else {
				if (n == 3)
					sBuffer[i] = 1;
			}
		}
	}
}

int main(void)
{
	DDRB = 0xFF; //Set PortB as Output

	while (1)
	{
		Render();
	}

	return 0;
}
