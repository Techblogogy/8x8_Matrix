#include <stdlib.h>

#define SIZE 8

uint8_t tBuffer[SIZE] =
{
	0b00000000,
	0b00000000,
	0b00000001,
	0b00000101,
	0b00000011,
	0b00000000,
	0b00000000,
	0b00000000
};

int main() {
	uint8_t iY, iX = 0; //For Loops Primary XY
		int8_t y0, x0 = 0; //For Loops Secondary XY

		uint8_t n = 0; //Neighbours

	//	PORTB &= ~_BV(DT);
	//	for (iY = 0; iY < SIZE * SIZE; iY++) {
	//		PORTB |= _BV(CLK); //Clock HIGH
	//		PORTB &= ~_BV(CLK); //Clock LOW
	//	}
	//	PORTB |= _BV(LTC); //Latch HIGH
	//	PORTB &= ~_BV(LTC); //Latch LOW

		for (iY = 0; iY < SIZE; iY++)
			tBuffer[iY] = sBuffer[iY];

		//Calculate
		for (iY = 0; iY < SIZE; iY++) {
			for (iX = 0; iX < SIZE; iX++) {
				n = 0;

				for (y0 = iY - 1; y0 <= iY + 1; y0++) {
					for (x0 = iX - 1; x0 <= iX + 1; x0++) {
						int wX = x0; if (x0 < 0) wX += SIZE;
						int wY = y0; if (y0 < 0) wY += SIZE;

						if (((tBuffer[wY % SIZE] & (1 << (7 - (wX % SIZE))))
								>> (7 - (wX % SIZE))) == 1)
							n++;
					}
				}

				if (n == 3)
					sBuffer[iY] |= (1 << (7 - iX));
				else if (n != 4)
					sBuffer[iY] &= ~(1 << (7 - iX));
			}
		}

	return 0;
}
