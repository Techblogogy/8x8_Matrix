/* GLOBAL DATA */

#include <stdlib.h>

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/eeprom.h>

#define TMR_TCK 78 //156

#define SIZE 8 //Matrix Size

#define CLK 5 // 2 //Clock
#define DT 3 // 0 //Data
#define LTC 4 // 1 //Latch

//Timers Data
volatile uint32_t tm = 0; //Logic Timer Tick
volatile uint32_t bTm = 0; //Buttons Timer Tick

//Display Data
uint8_t tBuffer[SIZE]; //Temporary Rendering Buffer
uint8_t sBuffer[SIZE]; //Main Rendering Buffer

//Random
uint8_t seed;



/* TETRIS DATA */

//Store Tetris Data in EEPROM
//Block Structure { Amount Of Tetrominos, Width Of Tetromino, Tetromino Data }
#define BLN 7
uint8_t EEMEM Blk[BLN][9] = {
		{ 2, 4,0b11110000, 2,0b10101010 },
		{ 4, 4,0b10001110, 2,0b11101000, 4,0b11100010, 2,0b01011100 },
		{ 4, 4,0b00101110, 2,0b10101100, 4,0b11101000, 2,0b11010100 },
		{ 1, 2,0b11110000 },
		{ 2, 4,0b01101100, 2,0b10110100 },
		{ 4, 4,0b01001110, 2,0b10111000, 4,0b11100100, 2,0b01110100 },
		{ 2, 4,0b11000110, 2,0b01111000 }
};

uint8_t trs[9]; //Current Tetris Object

uint8_t oldId = 0;
uint8_t id = 0; //Tetris Object Id

uint8_t xS, yS = 0; //XY Position Of Tetris Object
uint8_t oldX,oldY = 0;

uint8_t b = 0; //Collision Boolean




/* GAME OF LIFE DATA */

#define OPT 4

uint8_t EEMEM bfr[OPT][SIZE] = {
		{0b00000000,
		 0b01000000,
		 0b00100000,
		 0b11100000,
		 0b00000000,
		 0b00000000,
		 0b00000000,
		 0b00000000},

		 {0b00000000,
		  0b00100000,
		  0b00100000,
		  0b00100000,
		  0b00000000,
		  0b00001110,
		  0b00011100,
		  0b00000000},

		 {0b00000000,
		  0b0000000,
		  0b00110000,
		  0b01001000,
		  0b00110000,
		  0b00000000,
		  0b00000000,
		  0b00000000}
};





/* GLOBAL FUNCTIONS */

//Timer Interrupt
ISR (TIMER0_COMPA_vect) {
	tm++;
	bTm++;
}

//Push Main Buffer To Screen
static void Render() {
	int8_t iY, iX = 0; //For Loops Primary XY

	cli(); //Disable Interrupt

	for (iY = 0; iY < SIZE; iY++) {
		for (iX = 7; iX >= 4; iX--) {
			if (((sBuffer[iX] & (1 << (7 - iY))) >> (7 - iY)) == 1)
				PORTB |= _BV(DT);
			else
				PORTB &= ~_BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}
		for (iX = 3; iX >= 0; iX--) {
			if (iX == iY)
				PORTB &= ~_BV(DT);
			else
				PORTB |= _BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}

		for (iX = 0; iX < 4; iX++) {
			if (((sBuffer[iX] & (1 << (7 - iY))) >> (7 - iY)) == 1)
				PORTB |= _BV(DT);
			else
				PORTB &= ~_BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}
		for (iX = 4; iX < 8; iX++) {
			if (iX == iY)
				PORTB &= ~_BV(DT);
			else
				PORTB |= _BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}

		PORTB |= _BV(LTC); //Latch HIGH
		PORTB &= ~_BV(LTC); //Latch LOW
	}

	sei();  //Disable Interrupt
}


/* TETRIS FUNCTIONS */
void SetUpTetris() {
	srand(seed); //Random Seed
	eeprom_read_block((void*) &trs, (const void*) &Blk[rand()%BLN], 9); //Get Random Block

		RenderB();
}


/* GLOBAL MAIN */

int main(void) {
	DDRB = 0xff; //Set PortB as Output
	DDRD = 0; //Set PortD As Output

	//Setup Timer
	TCCR0A |= (1 << WGM01); //Set Timer To CTC Mode
	TCCR0B |= (1 << CS00) | (1 << CS02); //Set Scale Factor To Clk/1024
	OCR0A = TMR_TCK; //Set Timer Interval
	TIMSK0 |= (1 << OCIE0A); //Set Timer Interrupt On OCR0A Match

	//Setup ADC
	ADMUX |= (1<<MUX0) | (1<<MUX1); //Set Input Pin PB3
	ADMUX |= (1<<REFS0);
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //Set Division Factor To 128
	ADCSRA |= (1<<ADEN); //Enable ADC
	ADCSRA |= (1<<ADSC); //Start Conversion
	while (ADCSRA & (1<<ADSC)); //Wait until conversion ended
	seed = ADCL; //Generated Seed

	sei();
}
