#define F_CPU 10000000UL

#include <avr/io.h>
#include <util/delay.h>

#define SIZE 8

uint8_t tBuffer[SIZE];
uint8_t sBuffer[SIZE] =
{
	0b11111111,
	0b11111110,
	0b11111100,
	0b11111000,
	0b11110000,
	0b11100000,
	0b11000000,
	0b10000000
};

uint8_t iY, iX = 0; //For Loops Primary XY
uint8_t y0, x0 = 0; //For Loops Secondary XY


void Render()
{
	for (iY = 0; iY < SIZE; iY++)
	{
		for (iX = 7; iX >= 4; iX--)
		{
			if ( ((sBuffer[iY] & (1 << (7-iX))) >> (7-iX))  == 1)
				PORTB |= _BV(0);
			else
				PORTB &= ~_BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}

		for (iX = 3; iX >= 0; iX--)
		{
			if (iX == iY)
				PORTB &= ~_BV(0);
			else
				PORTB |= _BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}

		for (iX = 0; iX < 4; iX++)
		{
			if ( ((sBuffer[iY] & (1 << (7-iX))) >> (7-iX))  == 1)
				PORTB |= _BV(0);
			else
				PORTB &= ~_BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}
		for (iX = 4; iX < 8; iX++)
		{
			if (iX == iY)
				PORTB &= ~_BV(0);
			else
				PORTB |= _BV(0);

			PORTB |= _BV(2); //Clock HIGH
			PORTB &= ~_BV(2); //Clock LOW
		}

		PORTB |= _BV(1); //Latch HIGH
		PORTB &= ~_BV(1); //Latch LOW
	}
}

void Logic()
{
	//Copy temp buffer with screen buffer
	for (iY = 0; iY < SIZE * SIZE; iY++)
		tBuffer[iY] = sBuffer[iY];

	//Calculate
	for (iY = 0; iY < SIZE; iY++) {
		for (iX = 0; iX < SIZE; iX++) {
			int n = 0; //Neighbours
			int i = y * SIZE + x; //Id Of Cell

			//Calculate Neigbours
			for (y0 = iY - 1; y0 <= iY + 1; y0++) {
				for (x0 = x - 1; x0 <= x + 1; x0++) {
					if ((y != y0 || x != x0)
							&& (x0 >= 0 && x0 < SIZE && y0 >= 0 && y0 < SIZE)) {
						if ( ((tBuffer[y] & (1 << (7-x))) >> (7-x))  == 1)
							n++;
					}
				}
			}

			//Apply Rules
			if (tBuffer[i]) {
				if (n < 2)
					sBuffer[i] |= (1 << 2);
				else if (n == 2 || n == 3)
					sBuffer[i] = 1;
				else if (n > 3)
					sBuffer[i] = 0;
			} else {
				if (n == 3)
					sBuffer[i] = 1;
			}
		}
	}
}

int main(void)
{
	DDRB = 0xFF; //Set PortB as Output

	while (1)
	{
		Render();
	}

	return 0;
}
