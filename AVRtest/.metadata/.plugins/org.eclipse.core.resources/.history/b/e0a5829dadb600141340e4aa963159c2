//#define F_CPU 10000000UL //10 MHz

#include <avr/io.h>
#include <avr/interrupt.h>

#define SIZE 8 //Matrix Size

#define CLK 5 // 2 //Clock
#define DT 3 // 0 //Data
#define LTC 4 // 1 //Latch

//Stores Coluoms
uint8_t tBuffer[SIZE] = {0,0,0,0,0,0,0,0};
uint8_t sBuffer[SIZE] =
{
	0b00000000,
	0b00000000,
	0b01000000,
	0b00100000,
	0b11100000,
	0b00000000,
	0b00000000,
	0b00000000
};

int8_t iY, iX = 0; //For Loops Primary XY

volatile uint32_t tm = 0;

static void Render()
{
	cli();

	for (iY = 0; iY < SIZE; iY++)
	{
		for (iX = 7; iX >= 4; iX--)
		{
			if ( ((sBuffer[iX] & (1 << (7-iY))) >> (7-iY)) == 1)
				PORTB |= _BV(DT);
			else
				PORTB &= ~_BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}

		for (iX = 3; iX >= 0; iX--)
		{
			if (iX == iY)
				PORTB &= ~_BV(DT);
			else
				PORTB |= _BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}

		for (iX = 0; iX < 4; iX++)
		{
			if ( ((sBuffer[iX] & (1 << (7-iY))) >> (7-iY)) == 1)
				PORTB |= _BV(DT);
			else
				PORTB &= ~_BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}
		for (iX = 4; iX < 8; iX++)
		{
			if (iX == iY)
				PORTB &= ~_BV(DT);
			else
				PORTB |= _BV(DT);

			PORTB |= _BV(CLK); //Clock HIGH
			PORTB &= ~_BV(CLK); //Clock LOW
		}

		PORTB |= _BV(LTC); //Latch HIGH
		PORTB &= ~_BV(LTC); //Latch LOW
	}

	sei();
}

static void Logic()
{
	int8_t y0, x0 = 0; //For Loops Secondary XY
	int8_t n = 0; //Neighbours

	for (iY=0; iY<SIZE; iY++)
		tBuffer[iY] = sBuffer[iY];

	//Calculate
	for (iY = 0; iY < SIZE; iY++) {
		for (iX = 0; iX < SIZE; iX++) {
			n = 0;

			for (y0 = iY - 1; y0 <= iY + 1; y0++) {
				for (x0 = iX - 1; x0 <= iX + 1; x0++) {
					int wX = x0; if (x0 < 0) wX += SIZE;
					int wY = y0; if (y0 < 0) wY += SIZE;

					if (((tBuffer[wY%SIZE] & (1 << (7-(wX%SIZE)))) >> (7-(wX%SIZE))) == 1) n++;
				}
			}

			if (n == 3)
				sBuffer[iY] |= (1 << (7-iX));
			else if (n!=4)
				sBuffer[iY] &= ~(1 << (7-iX));
		}
	}
}

ISR (TIMER0_COMPA_vect)
{
	//tm++;

//	Logic();
//	Render();
}

int main(void)
{
	DDRB = 0xFF; //Set PortB as Output

	TCCR0A |= (1 << WGM02);
	OCR0A = 255;
	TIMSK0 |= (1 << OCIE0A);

	sei();

	TCCR0B |= (1 << CS00);

	while (1)
	{
//		if (tm > 1000) {
//			Logic();
//			tm = 0;
//		}

		Logic();
		Render();
	}

	return 0;
}
